@page "/mediaPlayer"
@using Blazor.Extensions

<h1>Media player!</h1>

<p>Here will media player info go about series</p>

@if (data == null || data.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (var str in data)
    {
        <p>@str</p>
    }
}

@functions
{

    List<string> data;

    protected override void OnInit()
    {
        data = new List<string>();
        Console.WriteLine("asdasdasd");
        StartWebsockets();
        
    }

    async void StartWebsockets()
    {
        var connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5080/ws/mediaPlayerHub", // The hub URL. If the Hub is hosted on the server where the blazor is hosted, you can just use the relative path.
                opt =>
                {
                    opt.LogLevel = SignalRLogLevel.Trace; // Client log level
                    opt.Transport = HttpTransportType.WebSockets; // Which transport you want to use for this connection
                })
            .Build(); // Build the HubConnection

        connection.On<string>("Receive", Handle); // Subscribe to messages sent from the Hub to the "Receive" method by passing a handle (Func<object, Task>) to process messages.

        await connection.StartAsync(); // Start the connection.
        
//        await connection.InvokeAsync("ServerMethod", param1, param2, paramX); // Invoke a method on the server called "ServerMethod" and pass parameters to it. 

//        var result = await connection.InvokeAsync<MyResult>("ServerMethod", param1, param2, paramX); // Invoke a method on the server called "ServerMethod", pass parameters to it and get the result back.
    }

    private Task Handle(string str)
    {
        Console.WriteLine(str);
        data.Add(str);
        StateHasChanged();
        
        return Task.CompletedTask;
    }

}