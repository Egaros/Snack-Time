@page "/mediaPlayer"
@using Blazor.Extensions
@using BlazorStandAlone.Models
@using Humanizer
@inject HttpClient Client

<h1>Media player!</h1>

<p>Here will media player info go about series</p>

@if (Series == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var seriesOrderedByLastWatched = Series.OrderByDescending(resource => resource.LastWatched);
    var lastWatched = seriesOrderedByLastWatched.First();
    var lastWatchedEpisode = lastWatched.Seasons.SelectMany(pair => pair.Value.Episodes).OrderByDescending(pair => pair.Value.LastWatched).First().Value;
    
    <h3>@lastWatched.Name - Season @lastWatchedEpisode.SeasonNumber, Episode @lastWatchedEpisode.EpisodeNumber , [@lastWatchedEpisode.Watched.ToString(@"hh\:mm\:ss")/@lastWatchedEpisode.Length.ToString(@"hh\:mm\:ss")]</h3>
    
    
    <table class='table'>
        <thead>
        <tr>
            <th>Series</th>
            <th>Last watched</th>
        </tr>
        </thead>
        <tbody>
        
        @foreach (var series in seriesOrderedByLastWatched)
        {
            <tr>
                <td>@series.Name</td>
                <td>@series.LastWatched.Humanize()</td>
            </tr>
        }
        </tbody>
    </table>
    
  
}

@functions
{

    GetSteamPlayerInfoResource[] Series;
    List<string> data;

    protected override async void OnInit()
    {
        Series = await Client.GetJsonAsync<GetSteamPlayerInfoResource[]>("http://localhost:5080/api/v1/Series");
        data = new List<string>();
        StartWebsockets();
        StateHasChanged();
    }

    async void StartWebsockets()
    {
        var connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5080/ws/mediaPlayerHub", // The hub URL. If the Hub is hosted on the server where the blazor is hosted, you can just use the relative path.
                opt =>
                {
                    opt.LogLevel = SignalRLogLevel.Trace; // Client log level
                    opt.Transport = HttpTransportType.WebSockets; // Which transport you want to use for this connection
                })
            .Build(); // Build the HubConnection

        connection.On<string>("Receive", Handle); // Subscribe to messages sent from the Hub to the "Receive" method by passing a handle (Func<object, Task>) to process messages.

        await connection.StartAsync(); // Start the connection.
        
//        await connection.InvokeAsync("ServerMethod", param1, param2, paramX); // Invoke a method on the server called "ServerMethod" and pass parameters to it. 

//        var result = await connection.InvokeAsync<MyResult>("ServerMethod", param1, param2, paramX); // Invoke a method on the server called "ServerMethod", pass parameters to it and get the result back.
    }

    private Task Handle(string str)
    {
        Console.WriteLine(str);
        var episode = Json.Deserialize<Episode>(str);

        var series = Series.FirstOrDefault(resource => resource.Name == episode.Name);
        if (series == null) return Task.CompletedTask;
        
        series.Seasons[episode.SeasonNumber.ToString()].Episodes[episode.EpisodeNumber.ToString()] = episode;

        StateHasChanged();
        return Task.CompletedTask;
    }

}