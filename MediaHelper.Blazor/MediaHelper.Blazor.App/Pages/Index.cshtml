@page "/system"
@using MediaHelper.Blazor.App.Services
@using MediaHelper.Model
@using Series = SonarrSharp.Models.Series
@inject ApiClient Client
@inject FileNavigationService FileNavigationService


<div class="container">
    <h1>System</h1>


    <h3>Navigation</h3>


    @if (Dirs == null)
    {
        <p>Loading...</p>
    }
    else
    {
        if (FileNavigationService.CanGoBack(CurrentFilePath))
        {
            <a href="javascript:void(0)" onclick="@(() => GoBack(CurrentFilePath))">
                <p>@("Back")</p>
            </a>
        }
        else
        {
            <a href="javascript:void(0)" onclick="@(async () => await DisplaySystemDrives())">
                <p>@($"Drives")</p>
            </a>
        }
        foreach (var dir in Dirs)
        {
            <a href="javascript:void(0)" onclick="@(async () => await GotoFilePath(dir))">
                <p>@dir</p>
            </a>
        }
    }
</div>


@functions
{

    private string[] Dirs { get; set; }
    private string CurrentFilePath { get; set; }


    protected override async Task OnInitAsync()
    {
        await DisplaySystemDrives();
    }

    async Task DisplaySystemDrives()
    {
        Dirs = await Client.System.GetSystemDrives();
        CurrentFilePath = Dirs[0];
    }

    async Task GotoFilePath(string filePath)
    {
        CurrentFilePath = filePath;
        Dirs = await Client.System.GetFoldersAndDirectorys(filePath);
//        Other change.
        //change
        //Another change.
    }


    private async Task GoBack(string currentFilePath)
    {
        var res = await FileNavigationService.Back(currentFilePath);
        CurrentFilePath = res.NewPath;
        Dirs = res.Dirs;
        StateHasChanged();
    }

}