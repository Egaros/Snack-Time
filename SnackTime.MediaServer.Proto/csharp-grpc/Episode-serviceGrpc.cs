// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/episode-service/episode-service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SnackTime.MediaServer.Service.Episode {
  public static partial class Episode
  {
    static readonly string __ServiceName = "snacktime.episode.service.Episode";

    static readonly grpc::Marshaller<global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest> __Marshaller_snacktime_episode_service_GetBySeriesIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse> __Marshaller_snacktime_episode_service_GetBySeriesIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SnackTime.MediaServer.Service.Episode.GetByIdRequest> __Marshaller_snacktime_episode_service_GetByIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SnackTime.MediaServer.Service.Episode.GetByIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SnackTime.MediaServer.Service.Episode.GetByIdResponse> __Marshaller_snacktime_episode_service_GetByIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SnackTime.MediaServer.Service.Episode.GetByIdResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest, global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse> __Method_GetBySeriesId = new grpc::Method<global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest, global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBySeriesId",
        __Marshaller_snacktime_episode_service_GetBySeriesIdRequest,
        __Marshaller_snacktime_episode_service_GetBySeriesIdResponse);

    static readonly grpc::Method<global::SnackTime.MediaServer.Service.Episode.GetByIdRequest, global::SnackTime.MediaServer.Service.Episode.GetByIdResponse> __Method_GetById = new grpc::Method<global::SnackTime.MediaServer.Service.Episode.GetByIdRequest, global::SnackTime.MediaServer.Service.Episode.GetByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetById",
        __Marshaller_snacktime_episode_service_GetByIdRequest,
        __Marshaller_snacktime_episode_service_GetByIdResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SnackTime.MediaServer.Service.Episode.EpisodeServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Episode</summary>
    public abstract partial class EpisodeBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse> GetBySeriesId(global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SnackTime.MediaServer.Service.Episode.GetByIdResponse> GetById(global::SnackTime.MediaServer.Service.Episode.GetByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Episode</summary>
    public partial class EpisodeClient : grpc::ClientBase<EpisodeClient>
    {
      /// <summary>Creates a new client for Episode</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EpisodeClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Episode that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EpisodeClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EpisodeClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EpisodeClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse GetBySeriesId(global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBySeriesId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse GetBySeriesId(global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBySeriesId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse> GetBySeriesIdAsync(global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBySeriesIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse> GetBySeriesIdAsync(global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBySeriesId, null, options, request);
      }
      public virtual global::SnackTime.MediaServer.Service.Episode.GetByIdResponse GetById(global::SnackTime.MediaServer.Service.Episode.GetByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SnackTime.MediaServer.Service.Episode.GetByIdResponse GetById(global::SnackTime.MediaServer.Service.Episode.GetByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SnackTime.MediaServer.Service.Episode.GetByIdResponse> GetByIdAsync(global::SnackTime.MediaServer.Service.Episode.GetByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SnackTime.MediaServer.Service.Episode.GetByIdResponse> GetByIdAsync(global::SnackTime.MediaServer.Service.Episode.GetByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetById, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EpisodeClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EpisodeClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EpisodeBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetBySeriesId, serviceImpl.GetBySeriesId)
          .AddMethod(__Method_GetById, serviceImpl.GetById).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EpisodeBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetBySeriesId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdRequest, global::SnackTime.MediaServer.Service.Episode.GetBySeriesIdResponse>(serviceImpl.GetBySeriesId));
      serviceBinder.AddMethod(__Method_GetById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SnackTime.MediaServer.Service.Episode.GetByIdRequest, global::SnackTime.MediaServer.Service.Episode.GetByIdResponse>(serviceImpl.GetById));
    }

  }
}
#endregion
