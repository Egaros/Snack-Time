// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/serssion-service/session-service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SnackTime.MediaServer.Service.Session {
  public static partial class Session
  {
    static readonly string __ServiceName = "snacktime.series.session.Session";

    static readonly grpc::Marshaller<global::SnackTime.MediaServer.Service.Session.GetAllRequest> __Marshaller_snacktime_series_session_GetAllRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SnackTime.MediaServer.Service.Session.GetAllRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SnackTime.MediaServer.Service.Session.GetAllResponse> __Marshaller_snacktime_series_session_GetAllResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SnackTime.MediaServer.Service.Session.GetAllResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SnackTime.MediaServer.Service.Session.UpsertRequest> __Marshaller_snacktime_series_session_UpsertRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SnackTime.MediaServer.Service.Session.UpsertRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SnackTime.MediaServer.Service.Session.UpsertResponse> __Marshaller_snacktime_series_session_UpsertResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SnackTime.MediaServer.Service.Session.UpsertResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SnackTime.MediaServer.Service.Session.GetAllRequest, global::SnackTime.MediaServer.Service.Session.GetAllResponse> __Method_GetAll = new grpc::Method<global::SnackTime.MediaServer.Service.Session.GetAllRequest, global::SnackTime.MediaServer.Service.Session.GetAllResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAll",
        __Marshaller_snacktime_series_session_GetAllRequest,
        __Marshaller_snacktime_series_session_GetAllResponse);

    static readonly grpc::Method<global::SnackTime.MediaServer.Service.Session.UpsertRequest, global::SnackTime.MediaServer.Service.Session.UpsertResponse> __Method_Upsert = new grpc::Method<global::SnackTime.MediaServer.Service.Session.UpsertRequest, global::SnackTime.MediaServer.Service.Session.UpsertResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Upsert",
        __Marshaller_snacktime_series_session_UpsertRequest,
        __Marshaller_snacktime_series_session_UpsertResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SnackTime.MediaServer.Service.Session.SessionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Session</summary>
    public abstract partial class SessionBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SnackTime.MediaServer.Service.Session.GetAllResponse> GetAll(global::SnackTime.MediaServer.Service.Session.GetAllRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SnackTime.MediaServer.Service.Session.UpsertResponse> Upsert(global::SnackTime.MediaServer.Service.Session.UpsertRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Session</summary>
    public partial class SessionClient : grpc::ClientBase<SessionClient>
    {
      /// <summary>Creates a new client for Session</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SessionClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Session that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SessionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SessionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SessionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SnackTime.MediaServer.Service.Session.GetAllResponse GetAll(global::SnackTime.MediaServer.Service.Session.GetAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SnackTime.MediaServer.Service.Session.GetAllResponse GetAll(global::SnackTime.MediaServer.Service.Session.GetAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAll, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SnackTime.MediaServer.Service.Session.GetAllResponse> GetAllAsync(global::SnackTime.MediaServer.Service.Session.GetAllRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SnackTime.MediaServer.Service.Session.GetAllResponse> GetAllAsync(global::SnackTime.MediaServer.Service.Session.GetAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAll, null, options, request);
      }
      public virtual global::SnackTime.MediaServer.Service.Session.UpsertResponse Upsert(global::SnackTime.MediaServer.Service.Session.UpsertRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Upsert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SnackTime.MediaServer.Service.Session.UpsertResponse Upsert(global::SnackTime.MediaServer.Service.Session.UpsertRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Upsert, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SnackTime.MediaServer.Service.Session.UpsertResponse> UpsertAsync(global::SnackTime.MediaServer.Service.Session.UpsertRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SnackTime.MediaServer.Service.Session.UpsertResponse> UpsertAsync(global::SnackTime.MediaServer.Service.Session.UpsertRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Upsert, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SessionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SessionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SessionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAll, serviceImpl.GetAll)
          .AddMethod(__Method_Upsert, serviceImpl.Upsert).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SessionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAll, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SnackTime.MediaServer.Service.Session.GetAllRequest, global::SnackTime.MediaServer.Service.Session.GetAllResponse>(serviceImpl.GetAll));
      serviceBinder.AddMethod(__Method_Upsert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SnackTime.MediaServer.Service.Session.UpsertRequest, global::SnackTime.MediaServer.Service.Session.UpsertResponse>(serviceImpl.Upsert));
    }

  }
}
#endregion
